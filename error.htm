<!DOCTYPE html>
 <html lang="en" xmlns="http://www.w3.org/1999/xhtml">
 <head>
 <meta charset="utf-8" />
 <title>Internal Server Error</title>
 <style>
 body {
 font-family: 'Segoe UI', Tahoma, Arial, Helvetica, sans-serif;
 font-size: .813em;
 color: #222;
 background-color: #fff;
 }
 
 h1, h2, h3, h4, h5 {
 /*font-family: 'Segoe UI',Tahoma,Arial,Helvetica,sans-serif;*/
 font-weight: 100;
 }
 
 h1 {
 color: #44525e;
 margin: 15px 0 15px 0;
 }
 
 h2 {
 margin: 10px 5px 0 0;
 }
 
 h3 {
 color: #363636;
 margin: 5px 5px 0 0;
 }
 
 code {
 font-family: Consolas, "Courier New", courier, monospace;
 }
 
 body .titleerror {
 padding: 3px 3px 6px 3px;
 display: block;
 font-size: 1.5em;
 font-weight: 100;
 }
 
 body .location {
 margin: 3px 0 10px 30px;
 }
 
 #header {
 font-size: 18px;
 padding: 15px 0;
 border-top: 1px #ddd solid;
 border-bottom: 1px #ddd solid;
 margin-bottom: 0;
 }
 
 #header li {
 display: inline;
 margin: 5px;
 padding: 5px;
 color: #a0a0a0;
 cursor: pointer;
 }
 
 #header .selected {
 background: #44c5f2;
 color: #fff;
 }
 
 #stackpage ul {
 list-style: none;
 padding-left: 0;
 margin: 0;
 /*border-bottom: 1px #ddd solid;*/
 }
 
 #stackpage .details {
 font-size: 1.2em;
 padding: 3px;
 color: #000;
 }
 
 #stackpage .stackerror {
 padding: 5px;
 border-bottom: 1px #ddd solid;
 }
 
 
 #stackpage .frame {
 padding: 0;
 margin: 0 0 0 30px;
 }
 
 #stackpage .frame h3 {
 padding: 2px;
 margin: 0;
 }
 
 #stackpage .source {
 padding: 0 0 0 30px;
 }
 
 #stackpage .source ol li {
 font-family: Consolas, "Courier New", courier, monospace;
 white-space: pre;
 background-color: #fbfbfb;
 }
 
 #stackpage .frame .source .highlight li span {
 color: #FF0000;
 }
 
 #stackpage .source ol.collapsible li {
 color: #888;
 }
 
 #stackpage .source ol.collapsible li span {
 color: #606060;
 }
 
 .page table {
 border-collapse: separate;
 border-spacing: 0;
 margin: 0 0 20px;
 }
 
 .page th {
 vertical-align: bottom;
 padding: 10px 5px 5px 5px;
 font-weight: 400;
 color: #a0a0a0;
 text-align: left;
 }
 
 .page td {
 padding: 3px 10px;
 }
 
 .page th, .page td {
 border-right: 1px #ddd solid;
 border-bottom: 1px #ddd solid;
 border-left: 1px transparent solid;
 border-top: 1px transparent solid;
 box-sizing: border-box;
 }
 
 .page th:last-child, .page td:last-child {
 border-right: 1px transparent solid;
 }
 
 .page .length {
 text-align: right;
 }
 
 a {
 color: #1ba1e2;
 text-decoration: none;
 }
 
 a:hover {
 color: #13709e;
 text-decoration: underline;
 }
 
 .showRawException {
 cursor: pointer;
 color: #44c5f2;
 background-color: transparent;
 font-size: 1.2em;
 text-align: left;
 text-decoration: none;
 display: inline-block;
 border: 0;
 padding: 0;
 }
 
 .rawExceptionStackTrace {
 font-size: 1.2em;
 }
 
 .rawExceptionBlock {
 border-top: 1px #ddd solid;
 border-bottom: 1px #ddd solid;
 }
 
 .showRawExceptionContainer {
 margin-top: 10px;
 margin-bottom: 10px;
 }
 
 .expandCollapseButton {
 cursor: pointer;
 float: left;
 height: 16px;
 width: 16px;
 font-size: 10px;
 position: absolute;
 left: 10px;
 background-color: #eee;
 padding: 0;
 border: 0;
 margin: 0;
 }
 
 </style>
 </head>
 <body>
 <h1>An unhandled exception occurred while processing the request.</h1>
 <div class="titleerror">APIErrorException: Operation returned an invalid status code &#x27;Unauthorized&#x27;</div>
 <p class="location">Microsoft.Azure.CognitiveServices.Language.LUIS.Runtime.Prediction.ResolveWithHttpMessagesAsync(string appId, string query, Nullable&lt;double&gt; timezoneOffset, Nullable&lt;bool&gt; verbose, Nullable&lt;bool&gt; staging, Nullable&lt;bool&gt; spellCheck, string bingSpellCheckSubscriptionKey, Nullable&lt;bool&gt; log, Dictionary&lt;string, List&lt;string&gt;&gt; customHeaders, CancellationToken cancellationToken)</p>
 <ul id="header">
 <li id="stack" tabindex="1" class="selected">
 Stack
 </li>
 <li id="query" tabindex="2">
 Query
 </li>
 <li id="cookies" tabindex="3">
 Cookies
 </li>
 <li id="headers" tabindex="4">
 Headers
 </li>
 </ul>
 
 <div id="stackpage" class="page">
 <ul>
 <li>
 <h2 class="stackerror">APIErrorException: Operation returned an invalid status code &#x27;Unauthorized&#x27;</h2>
 <ul>
 <li class="frame" id="frame1">
 <h3>Microsoft.Azure.CognitiveServices.Language.LUIS.Runtime.Prediction.ResolveWithHttpMessagesAsync(string appId, string query, Nullable&lt;double&gt; timezoneOffset, Nullable&lt;bool&gt; verbose, Nullable&lt;bool&gt; staging, Nullable&lt;bool&gt; spellCheck, string bingSpellCheckSubscriptionKey, Nullable&lt;bool&gt; log, Dictionary&lt;string, List&lt;string&gt;&gt; customHeaders, CancellationToken cancellationToken)</h3>
 
 </li>
 <li class="frame" id="frame2">
 <h3>Microsoft.Azure.CognitiveServices.Language.LUIS.Runtime.PredictionExtensions.ResolveAsync(IPrediction operations, string appId, string query, Nullable&lt;double&gt; timezoneOffset, Nullable&lt;bool&gt; verbose, Nullable&lt;bool&gt; staging, Nullable&lt;bool&gt; spellCheck, string bingSpellCheckSubscriptionKey, Nullable&lt;bool&gt; log, CancellationToken cancellationToken)</h3>
 
 </li>
 <li class="frame" id="frame3">
 <h3>Microsoft.Bot.Builder.AI.Luis.LuisRecognizer.RecognizeInternalAsync(ITurnContext turnContext, LuisPredictionOptions predictionOptions, Dictionary&lt;string, string&gt; telemetryProperties, Dictionary&lt;string, double&gt; telemetryMetrics, CancellationToken cancellationToken) in <code title="d:\a\1\s\libraries\Microsoft.Bot.Builder.AI.LUIS\LuisRecognizer.cs">LuisRecognizer.cs</code></h3>
 
 </li>
 <li class="frame" id="frame4">
 <h3>Microsoft.Bot.Builder.AI.Luis.LuisRecognizer.RecognizeAsync(ITurnContext turnContext, CancellationToken cancellationToken) in <code title="d:\a\1\s\libraries\Microsoft.Bot.Builder.AI.LUIS\LuisRecognizer.cs">LuisRecognizer.cs</code></h3>
 
 </li>
 <li class="frame" id="frame5">
 <h3>PluralsightBot.Dialogs.MainDialog.InitialStepAsync(WaterfallStepContext stepContext, CancellationToken cancellationToken) in <code title="C:\Projects\EchoBot\PluralsightBot\Dialogs\MainDialog.cs">MainDialog.cs</code></h3>
 
 <button class="expandCollapseButton" data-frameId="frame5">+</button>
 <div class="source">
 <ol start="46" class="collapsible">
 <li><span> // Set the starting Dialog</span></li>
 <li><span> InitialDialogId = $&quot;{nameof(MainDialog)}.mainFlow&quot;;</span></li>
 <li><span> }</span></li>
 <li><span></span></li>
 <li><span> private async Task&lt;DialogTurnResult&gt; InitialStepAsync(WaterfallStepContext stepContext, CancellationToken cancellationToken)</span></li>
 <li><span> {</span></li>
 </ol>
 
 <ol start="52" class="highlight">
 <li><span> var recognizerResult =</span></li>
 </ol>
 
 <ol start='53' class="collapsible">
 <li><span> await _luisService.LuisRecognizer.RecognizeAsync(stepContext.Context, cancellationToken);</span></li>
 <li><span></span></li>
 <li><span> var topIntent = recognizerResult.GetTopScoringIntent();</span></li>
 <li><span></span></li>
 <li><span> switch (topIntent.intent)</span></li>
 <li><span> {</span></li>
 </ol>
 </div>
 </li>
 <li class="frame" id="frame6">
 <h3>Microsoft.Bot.Builder.Dialogs.WaterfallDialog.OnStepAsync(WaterfallStepContext stepContext, CancellationToken cancellationToken) in <code title="d:\a\1\s\libraries\Microsoft.Bot.Builder.Dialogs\WaterfallDialog.cs">WaterfallDialog.cs</code></h3>
 
 </li>
 <li class="frame" id="frame7">
 <h3>Microsoft.Bot.Builder.Dialogs.WaterfallDialog.RunStepAsync(DialogContext dc, int index, DialogReason reason, object result, CancellationToken cancellationToken) in <code title="d:\a\1\s\libraries\Microsoft.Bot.Builder.Dialogs\WaterfallDialog.cs">WaterfallDialog.cs</code></h3>
 
 </li>
 <li class="frame" id="frame8">
 <h3>Microsoft.Bot.Builder.Dialogs.WaterfallDialog.BeginDialogAsync(DialogContext dc, object options, CancellationToken cancellationToken) in <code title="d:\a\1\s\libraries\Microsoft.Bot.Builder.Dialogs\WaterfallDialog.cs">WaterfallDialog.cs</code></h3>
 
 </li>
 <li class="frame" id="frame9">
 <h3>Microsoft.Bot.Builder.Dialogs.DialogContext.BeginDialogAsync(string dialogId, object options, CancellationToken cancellationToken) in <code title="d:\a\1\s\libraries\Microsoft.Bot.Builder.Dialogs\DialogContext.cs">DialogContext.cs</code></h3>
 
 </li>
 <li class="frame" id="frame10">
 <h3>Microsoft.Bot.Builder.Dialogs.ComponentDialog.BeginDialogAsync(DialogContext outerDc, object options, CancellationToken cancellationToken) in <code title="d:\a\1\s\libraries\Microsoft.Bot.Builder.Dialogs\ComponentDialog.cs">ComponentDialog.cs</code></h3>
 
 </li>
 <li class="frame" id="frame11">
 <h3>Microsoft.Bot.Builder.Dialogs.DialogContext.BeginDialogAsync(string dialogId, object options, CancellationToken cancellationToken) in <code title="d:\a\1\s\libraries\Microsoft.Bot.Builder.Dialogs\DialogContext.cs">DialogContext.cs</code></h3>
 
 </li>
 <li class="frame" id="frame12">
 <h3>PluralsightBot.Helpers.DialogExtensions.Run(Dialog dialog, ITurnContext turnContext, IStatePropertyAccessor&lt;DialogState&gt; accessor, CancellationToken cancellationToken) in <code title="C:\Projects\EchoBot\PluralsightBot\Helpers\DialogExtensions.cs">DialogExtensions.cs</code></h3>
 
 <button class="expandCollapseButton" data-frameId="frame12">+</button>
 <div class="source">
 <ol start="16" class="collapsible">
 <li><span> dialogSet.Add(dialog);</span></li>
 <li><span></span></li>
 <li><span> var dialogContext = await dialogSet.CreateContextAsync(turnContext, cancellationToken);</span></li>
 <li><span> var results = await dialogContext.ContinueDialogAsync(cancellationToken);</span></li>
 <li><span> if (results.Status == DialogTurnStatus.Empty)</span></li>
 <li><span> {</span></li>
 </ol>
 
 <ol start="22" class="highlight">
 <li><span> await dialogContext.BeginDialogAsync(dialog.Id, null, cancellationToken);</span></li>
 </ol>
 
 <ol start='23' class="collapsible">
 <li><span> }</span></li>
 <li><span> }</span></li>
 <li><span> }</span></li>
 <li><span>}</span></li>
 </ol>
 </div>
 </li>
 <li class="frame" id="frame13">
 <h3>PluralsightBot.Bots.DialogBot&lt;T&gt;.OnMessageActivityAsync(ITurnContext&lt;IMessageActivity&gt; turnContext, CancellationToken cancellationToken) in <code title="C:\Projects\EchoBot\PluralsightBot\Bots\DialogBot.cs">DialogBot.cs</code></h3>
 
 <button class="expandCollapseButton" data-frameId="frame13">+</button>
 <div class="source">
 <ol start="35" class="collapsible">
 <li><span></span></li>
 <li><span> protected override async Task OnMessageActivityAsync(ITurnContext&lt;IMessageActivity&gt; turnContext, CancellationToken cancellationToken)</span></li>
 <li><span> {</span></li>
 <li><span> _logger.LogInformation(&quot;Running dialog with Message Activity.&quot;);</span></li>
 <li><span></span></li>
 <li><span> // Run the Dialog with the new message Activity.</span></li>
 </ol>
 
 <ol start="41" class="highlight">
 <li><span> await _dialog.Run(turnContext, _botStateService.DialogStateAccessor, cancellationToken);</span></li>
 </ol>
 
 <ol start='42' class="collapsible">
 <li><span> }</span></li>
 <li><span> }</span></li>
 <li><span></span></li>
 <li><span>}</span></li>
 </ol>
 </div>
 </li>
 <li class="frame" id="frame14">
 <h3>PluralsightBot.Bots.DialogBot&lt;T&gt;.OnTurnAsync(ITurnContext turnContext, CancellationToken cancellationToken) in <code title="C:\Projects\EchoBot\PluralsightBot\Bots\DialogBot.cs">DialogBot.cs</code></h3>
 
 <button class="expandCollapseButton" data-frameId="frame14">+</button>
 <div class="source">
 <ol start="23" class="collapsible">
 <li><span> _dialog = dialog ?? throw new System.ArgumentNullException(nameof(dialog));</span></li>
 <li><span> _logger = logger ?? throw new System.ArgumentNullException(nameof(logger));</span></li>
 <li><span> }</span></li>
 <li><span></span></li>
 <li><span> public override async Task OnTurnAsync(ITurnContext turnContext, CancellationToken cancellationToken = default(CancellationToken))</span></li>
 <li><span> {</span></li>
 </ol>
 
 <ol start="29" class="highlight">
 <li><span> await base.OnTurnAsync(turnContext, cancellationToken);</span></li>
 </ol>
 
 <ol start='30' class="collapsible">
 <li><span></span></li>
 <li><span> // Save any state changes that might have occured during the turn.</span></li>
 <li><span> await _botStateService.UserState.SaveChangesAsync(turnContext, false, cancellationToken);</span></li>
 <li><span> await _botStateService.ConversationState.SaveChangesAsync(turnContext, false, cancellationToken);</span></li>
 <li><span> }</span></li>
 <li><span></span></li>
 </ol>
 </div>
 </li>
 <li class="frame" id="frame15">
 <h3>Microsoft.Bot.Builder.BotFrameworkAdapter&#x2B;TenantIdWorkaroundForTeamsMiddleware.OnTurnAsync(ITurnContext turnContext, NextDelegate next, CancellationToken cancellationToken) in <code title="d:\a\1\s\libraries\Microsoft.Bot.Builder\BotFrameworkAdapter.cs">BotFrameworkAdapter.cs</code></h3>
 
 </li>
 <li class="frame" id="frame16">
 <h3>Microsoft.Bot.Builder.MiddlewareSet.ReceiveActivityWithStatusAsync(ITurnContext turnContext, BotCallbackHandler callback, CancellationToken cancellationToken) in <code title="d:\a\1\s\libraries\Microsoft.Bot.Builder\MiddlewareSet.cs">MiddlewareSet.cs</code></h3>
 
 </li>
 <li class="frame" id="frame17">
 <h3>Microsoft.Bot.Builder.BotAdapter.RunPipelineAsync(ITurnContext turnContext, BotCallbackHandler callback, CancellationToken cancellationToken) in <code title="d:\a\1\s\libraries\Microsoft.Bot.Builder\BotAdapter.cs">BotAdapter.cs</code></h3>
 
 </li>
 <li class="frame" id="frame18">
 <h3>Microsoft.Bot.Builder.BotAdapter.RunPipelineAsync(ITurnContext turnContext, BotCallbackHandler callback, CancellationToken cancellationToken) in <code title="d:\a\1\s\libraries\Microsoft.Bot.Builder\BotAdapter.cs">BotAdapter.cs</code></h3>
 
 </li>
 <li class="frame" id="frame19">
 <h3>Microsoft.Bot.Builder.BotFrameworkAdapter.ProcessActivityAsync(ClaimsIdentity identity, Activity activity, BotCallbackHandler callback, CancellationToken cancellationToken) in <code title="d:\a\1\s\libraries\Microsoft.Bot.Builder\BotFrameworkAdapter.cs">BotFrameworkAdapter.cs</code></h3>
 
 </li>
 <li class="frame" id="frame20">
 <h3>Microsoft.Bot.Builder.BotFrameworkAdapter.ProcessActivityAsync(string authHeader, Activity activity, BotCallbackHandler callback, CancellationToken cancellationToken) in <code title="d:\a\1\s\libraries\Microsoft.Bot.Builder\BotFrameworkAdapter.cs">BotFrameworkAdapter.cs</code></h3>
 
 </li>
 <li class="frame" id="frame21">
 <h3>Microsoft.Bot.Builder.Integration.AspNet.Core.BotFrameworkHttpAdapter.ProcessAsync(HttpRequest httpRequest, HttpResponse httpResponse, IBot bot, CancellationToken cancellationToken) in <code title="d:\a\1\s\libraries\integration\Microsoft.Bot.Builder.Integration.AspNet.Core\BotFrameworkHttpAdapter.cs">BotFrameworkHttpAdapter.cs</code></h3>
 
 </li>
 <li class="frame" id="frame22">
 <h3>PluralsightBot.Controllers.BotController.PostAsync() in <code title="C:\Projects\EchoBot\PluralsightBot\Controllers\BotController.cs">BotController.cs</code></h3>
 
 <button class="expandCollapseButton" data-frameId="frame22">+</button>
 <div class="source">
 <ol start="28" class="collapsible">
 <li><span></span></li>
 <li><span> [HttpPost]</span></li>
 <li><span> public async Task PostAsync()</span></li>
 <li><span> {</span></li>
 <li><span> // Delegate the processing of the HTTP POST to the adapter.</span></li>
 <li><span> // The adapter will invoke the bot.</span></li>
 </ol>
 
 <ol start="34" class="highlight">
 <li><span> await Adapter.ProcessAsync(Request, Response, Bot);</span></li>
 </ol>
 
 <ol start='35' class="collapsible">
 <li><span> }</span></li>
 <li><span> }</span></li>
 <li><span>}</span></li>
 </ol>
 </div>
 </li>
 <li class="frame" id="frame23">
 <h3>lambda_method(Closure , object )</h3>
 
 </li>
 <li class="frame" id="frame24">
 <h3>Microsoft.Extensions.Internal.ObjectMethodExecutorAwaitable&#x2B;Awaiter.GetResult()</h3>
 
 </li>
 <li class="frame" id="frame25">
 <h3>Microsoft.AspNetCore.Mvc.Internal.ActionMethodExecutor&#x2B;AwaitableResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, object controller, object[] arguments)</h3>
 
 </li>
 <li class="frame" id="frame26">
 <h3>System.Threading.Tasks.ValueTask&lt;TResult&gt;.get_Result()</h3>
 
 </li>
 <li class="frame" id="frame27">
 <h3>Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeActionMethodAsync()</h3>
 
 </li>
 <li class="frame" id="frame28">
 <h3>Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeNextActionFilterAsync()</h3>
 
 </li>
 <li class="frame" id="frame29">
 <h3>Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)</h3>
 
 </li>
 <li class="frame" id="frame30">
 <h3>Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)</h3>
 
 </li>
 <li class="frame" id="frame31">
 <h3>Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeInnerFilterAsync()</h3>
 
 </li>
 <li class="frame" id="frame32">
 <h3>Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()</h3>
 
 </li>
 <li class="frame" id="frame33">
 <h3>Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)</h3>
 
 </li>
 <li class="frame" id="frame34">
 <h3>Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)</h3>
 
 </li>
 <li class="frame" id="frame35">
 <h3>Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()</h3>
 
 </li>
 <li class="frame" id="frame36">
 <h3>Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()</h3>
 
 </li>
 <li class="frame" id="frame37">
 <h3>Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)</h3>
 
 </li>
 <li class="frame" id="frame38">
 <h3>Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)</h3>
 
 </li>
 <li class="frame" id="frame39">
 <h3>Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)</h3>
 
 </li>
 </ul>
 </li>
 <li>
 <br/>
 <div class="rawExceptionBlock">
 <div class="showRawExceptionContainer">
 <button class="showRawException" data-exceptionDetailId="exceptionDetail1">Show raw exception details</button>
 </div>
 <div id="exceptionDetail1" class="rawExceptionDetails">
 <pre class="rawExceptionStackTrace">Microsoft.Azure.CognitiveServices.Language.LUIS.Runtime.Models.APIErrorException: Operation returned an invalid status code &#x27;Unauthorized&#x27;&#xD;&#xA; at Microsoft.Azure.CognitiveServices.Language.LUIS.Runtime.Prediction.ResolveWithHttpMessagesAsync(String appId, String query, Nullable`1 timezoneOffset, Nullable`1 verbose, Nullable`1 staging, Nullable`1 spellCheck, String bingSpellCheckSubscriptionKey, Nullable`1 log, Dictionary`2 customHeaders, CancellationToken cancellationToken)&#xD;&#xA; at Microsoft.Azure.CognitiveServices.Language.LUIS.Runtime.PredictionExtensions.ResolveAsync(IPrediction operations, String appId, String query, Nullable`1 timezoneOffset, Nullable`1 verbose, Nullable`1 staging, Nullable`1 spellCheck, String bingSpellCheckSubscriptionKey, Nullable`1 log, CancellationToken cancellationToken)&#xD;&#xA; at Microsoft.Bot.Builder.AI.Luis.LuisRecognizer.RecognizeInternalAsync(ITurnContext turnContext, LuisPredictionOptions predictionOptions, Dictionary`2 telemetryProperties, Dictionary`2 telemetryMetrics, CancellationToken cancellationToken) in d:\a\1\s\libraries\Microsoft.Bot.Builder.AI.LUIS\LuisRecognizer.cs:line 345&#xD;&#xA; at Microsoft.Bot.Builder.AI.Luis.LuisRecognizer.RecognizeAsync(ITurnContext turnContext, CancellationToken cancellationToken) in d:\a\1\s\libraries\Microsoft.Bot.Builder.AI.LUIS\LuisRecognizer.cs:line 145&#xD;&#xA; at PluralsightBot.Dialogs.MainDialog.InitialStepAsync(WaterfallStepContext stepContext, CancellationToken cancellationToken) in C:\Projects\EchoBot\PluralsightBot\Dialogs\MainDialog.cs:line 52&#xD;&#xA; at Microsoft.Bot.Builder.Dialogs.WaterfallDialog.OnStepAsync(WaterfallStepContext stepContext, CancellationToken cancellationToken) in d:\a\1\s\libraries\Microsoft.Bot.Builder.Dialogs\WaterfallDialog.cs:line 166&#xD;&#xA; at Microsoft.Bot.Builder.Dialogs.WaterfallDialog.RunStepAsync(DialogContext dc, Int32 index, DialogReason reason, Object result, CancellationToken cancellationToken) in d:\a\1\s\libraries\Microsoft.Bot.Builder.Dialogs\WaterfallDialog.cs:line 188&#xD;&#xA; at Microsoft.Bot.Builder.Dialogs.WaterfallDialog.BeginDialogAsync(DialogContext dc, Object options, CancellationToken cancellationToken) in d:\a\1\s\libraries\Microsoft.Bot.Builder.Dialogs\WaterfallDialog.cs:line 77&#xD;&#xA; at Microsoft.Bot.Builder.Dialogs.DialogContext.BeginDialogAsync(String dialogId, Object options, CancellationToken cancellationToken) in d:\a\1\s\libraries\Microsoft.Bot.Builder.Dialogs\DialogContext.cs:line 113&#xD;&#xA; at Microsoft.Bot.Builder.Dialogs.ComponentDialog.BeginDialogAsync(DialogContext outerDc, Object options, CancellationToken cancellationToken) in d:\a\1\s\libraries\Microsoft.Bot.Builder.Dialogs\ComponentDialog.cs:line 60&#xD;&#xA; at Microsoft.Bot.Builder.Dialogs.DialogContext.BeginDialogAsync(String dialogId, Object options, CancellationToken cancellationToken) in d:\a\1\s\libraries\Microsoft.Bot.Builder.Dialogs\DialogContext.cs:line 113&#xD;&#xA; at PluralsightBot.Helpers.DialogExtensions.Run(Dialog dialog, ITurnContext turnContext, IStatePropertyAccessor`1 accessor, CancellationToken cancellationToken) in C:\Projects\EchoBot\PluralsightBot\Helpers\DialogExtensions.cs:line 22&#xD;&#xA; at PluralsightBot.Bots.DialogBot`1.OnMessageActivityAsync(ITurnContext`1 turnContext, CancellationToken cancellationToken) in C:\Projects\EchoBot\PluralsightBot\Bots\DialogBot.cs:line 41&#xD;&#xA; at PluralsightBot.Bots.DialogBot`1.OnTurnAsync(ITurnContext turnContext, CancellationToken cancellationToken) in C:\Projects\EchoBot\PluralsightBot\Bots\DialogBot.cs:line 29&#xD;&#xA; at Microsoft.Bot.Builder.BotFrameworkAdapter.TenantIdWorkaroundForTeamsMiddleware.OnTurnAsync(ITurnContext turnContext, NextDelegate next, CancellationToken cancellationToken) in d:\a\1\s\libraries\Microsoft.Bot.Builder\BotFrameworkAdapter.cs:line 995&#xD;&#xA; at Microsoft.Bot.Builder.MiddlewareSet.ReceiveActivityWithStatusAsync(ITurnContext turnContext, BotCallbackHandler callback, CancellationToken cancellationToken) in d:\a\1\s\libraries\Microsoft.Bot.Builder\MiddlewareSet.cs:line 55&#xD;&#xA; at Microsoft.Bot.Builder.BotAdapter.RunPipelineAsync(ITurnContext turnContext, BotCallbackHandler callback, CancellationToken cancellationToken) in d:\a\1\s\libraries\Microsoft.Bot.Builder\BotAdapter.cs:line 167&#xD;&#xA; at Microsoft.Bot.Builder.BotAdapter.RunPipelineAsync(ITurnContext turnContext, BotCallbackHandler callback, CancellationToken cancellationToken) in d:\a\1\s\libraries\Microsoft.Bot.Builder\BotAdapter.cs:line 177&#xD;&#xA; at Microsoft.Bot.Builder.BotFrameworkAdapter.ProcessActivityAsync(ClaimsIdentity identity, Activity activity, BotCallbackHandler callback, CancellationToken cancellationToken) in d:\a\1\s\libraries\Microsoft.Bot.Builder\BotFrameworkAdapter.cs:line 275&#xD;&#xA; at Microsoft.Bot.Builder.BotFrameworkAdapter.ProcessActivityAsync(String authHeader, Activity activity, BotCallbackHandler callback, CancellationToken cancellationToken) in d:\a\1\s\libraries\Microsoft.Bot.Builder\BotFrameworkAdapter.cs:line 246&#xD;&#xA; at Microsoft.Bot.Builder.Integration.AspNet.Core.BotFrameworkHttpAdapter.ProcessAsync(HttpRequest httpRequest, HttpResponse httpResponse, IBot bot, CancellationToken cancellationToken) in d:\a\1\s\libraries\integration\Microsoft.Bot.Builder.Integration.AspNet.Core\BotFrameworkHttpAdapter.cs:line 71&#xD;&#xA; at PluralsightBot.Controllers.BotController.PostAsync() in C:\Projects\EchoBot\PluralsightBot\Controllers\BotController.cs:line 34&#xD;&#xA; at lambda_method(Closure , Object )&#xD;&#xA; at Microsoft.Extensions.Internal.ObjectMethodExecutorAwaitable.Awaiter.GetResult()&#xD;&#xA; at Microsoft.AspNetCore.Mvc.Internal.ActionMethodExecutor.AwaitableResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)&#xD;&#xA; at System.Threading.Tasks.ValueTask`1.get_Result()&#xD;&#xA; at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeActionMethodAsync()&#xD;&#xA; at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeNextActionFilterAsync()&#xD;&#xA; at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)&#xD;&#xA; at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)&#xD;&#xA; at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeInnerFilterAsync()&#xD;&#xA; at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()&#xD;&#xA; at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)&#xD;&#xA; at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)&#xD;&#xA; at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()&#xD;&#xA; at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()&#xD;&#xA; at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)&#xD;&#xA; at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)&#xD;&#xA; at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)</pre>
 </div>
 </div>
 </li>
 </ul>
 </div>
 
 <div id="querypage" class="page">
 <p>No QueryString data.</p>
 </div>
 
 <div id="cookiespage" class="page">
 <p>No cookie data.</p>
 </div>
 <div id="headerspage" class="page">
 <table>
 <thead>
 <tr>
 <th>Variable</th>
 <th>Value</th>
 </tr>
 </thead>
 <tbody>
 <tr>
 <td>Accept</td>
 <td>*/*</td>
 </tr>
 <tr>
 <td>Accept-Encoding</td>
 <td>gzip,deflate</td>
 </tr>
 <tr>
 <td>Connection</td>
 <td>Keep-Alive</td>
 </tr>
 <tr>
 <td>Content-Length</td>
 <td>659</td>
 </tr>
 <tr>
 <td>Content-Type</td>
 <td>application/json</td>
 </tr>
 <tr>
 <td>Host</td>
 <td>localhost:3978</td>
 </tr>
 <tr>
 <td>MS-ASPNETCORE-TOKEN</td>
 <td>73f44b44-db4b-4742-bb07-62f2335a115d</td>
 </tr>
 <tr>
 <td>User-Agent</td>
 <td>node-fetch/1.0 (&#x2B;https://github.com/bitinn/node-fetch)</td>
 </tr>
 <tr>
 <td>X-Original-For</td>
 <td>127.0.0.1:51493</td>
 </tr>
 <tr>
 <td>X-Original-Proto</td>
 <td>http</td>
 </tr>
 </tbody>
 </table>
 </div>
 <script>
 //<!--
 (function (window, undefined) {
 "use strict";
 
 function ns(selector, element) {
 return new NodeCollection(selector, element);
 }
 
 function NodeCollection(selector, element) {
 this.items = [];
 element = element || window.document;
 
 var nodeList;
 
 if (typeof (selector) === "string") {
 nodeList = element.querySelectorAll(selector);
 for (var i = 0, l = nodeList.length; i < l; i++) {
 this.items.push(nodeList.item(i));
 }
 }
 }
 
 NodeCollection.prototype = {
 each: function (callback) {
 for (var i = 0, l = this.items.length; i < l; i++) {
 callback(this.items[i], i);
 }
 return this;
 },
 
 children: function (selector) {
 var children = [];
 
 this.each(function (el) {
 children = children.concat(ns(selector, el).items);
 });
 
 return ns(children);
 },
 
 hide: function () {
 this.each(function (el) {
 el.style.display = "none";
 });
 
 return this;
 },
 
 toggle: function () {
 this.each(function (el) {
 el.style.display = el.style.display === "none" ? "" : "none";
 });
 
 return this;
 },
 
 show: function () {
 this.each(function (el) {
 el.style.display = "";
 });
 
 return this;
 },
 
 addClass: function (className) {
 this.each(function (el) {
 var existingClassName = el.className,
 classNames;
 if (!existingClassName) {
 el.className = className;
 } else {
 classNames = existingClassName.split(" ");
 if (classNames.indexOf(className) < 0) {
 el.className = existingClassName + " " + className;
 }
 }
 });
 
 return this;
 },
 
 removeClass: function (className) {
 this.each(function (el) {
 var existingClassName = el.className,
 classNames, index;
 if (existingClassName === className) {
 el.className = "";
 } else if (existingClassName) {
 classNames = existingClassName.split(" ");
 index = classNames.indexOf(className);
 if (index > 0) {
 classNames.splice(index, 1);
 el.className = classNames.join(" ");
 }
 }
 });
 
 return this;
 },
 
 attr: function (name) {
 if (this.items.length === 0) {
 return null;
 }
 
 return this.items[0].getAttribute(name);
 },
 
 on: function (eventName, handler) {
 this.each(function (el, idx) {
 var callback = function (e) {
 e = e || window.event;
 if (!e.which && e.keyCode) {
 e.which = e.keyCode; // Normalize IE8 key events
 }
 handler.apply(el, [e]);
 };
 
 if (el.addEventListener) { // DOM Events
 el.addEventListener(eventName, callback, false);
 } else if (el.attachEvent) { // IE8 events
 el.attachEvent("on" + eventName, callback);
 } else {
 el["on" + type] = callback;
 }
 });
 
 return this;
 },
 
 click: function (handler) {
 return this.on("click", handler);
 },
 
 keypress: function (handler) {
 return this.on("keypress", handler);
 }
 };
 
 function frame(el) {
 ns(".source .collapsible", el).toggle();
 }
 
 function expandCollapseButton(el) {
 var frameId = el.getAttribute("data-frameId");
 frame(document.getElementById(frameId));
 if (el.innerText === "+") {
 el.innerText = "-";
 }
 else {
 el.innerText = "+";
 }
 }
 
 function tab(el) {
 var unselected = ns("#header .selected").removeClass("selected").attr("id");
 var selected = ns("#" + el.id).addClass("selected").attr("id");
 
 ns("#" + unselected + "page").hide();
 ns("#" + selected + "page").show();
 }
 
 ns(".rawExceptionDetails").hide();
 ns(".collapsible").hide();
 ns(".page").hide();
 ns("#stackpage").show();
 
 ns(".expandCollapseButton")
 .click(function () {
 expandCollapseButton(this);
 })
 .keypress(function (e) {
 if (e.which === 13) {
 expandCollapseButton(this);
 }
 });
 
 ns("#header li")
 .click(function () {
 tab(this);
 })
 .keypress(function (e) {
 if (e.which === 13) {
 tab(this);
 }
 });
 
 ns(".showRawException")
 .click(function () {
 var exceptionDetailId = this.getAttribute("data-exceptionDetailId");
 ns("#" + exceptionDetailId).toggle();
 });
 })(window);
 //-->
 </script>
 </body>
 </html>
 